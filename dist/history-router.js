!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="/",e(e.s=2)}([function(t,n){var e,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(t){e=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,s=[],f=!1,h=-1;function l(){f&&u&&(f=!1,u.length?s=u.concat(s):h=-1,s.length&&d())}function d(){if(!f){var t=c(l);f=!0;for(var n=s.length;n;){for(u=s,s=[];++h<n;)u&&u[h].run();h=-1,n=s.length}u=null,f=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(n){try{return r.call(null,t)}catch(n){return r.call(this,t)}}}(t)}}function p(t,n){this.fun=t,this.array=n}function v(){}o.nextTick=function(t){var n=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)n[e-1]=arguments[e];s.push(new p(t,n)),1!==s.length||f||c(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,n,e){!function(n,e){t.exports=e()}(0,function(){"use strict";var t=/\/$/,n=/^\//,e=/[()]/g,r=/\((.*?)\)/g,o=/\*\w+/g,i=/(\(\?)?:\w+/,a=/(\(\?)?:\w+/g,c=/[-{}[\]+?.,\\^$|#\s]/g;function u(t){return"[object Array]"===Object.prototype.toString.call(t)}function s(t,n){return t=t||"",function(t){if(null==t)return!0;if(t.length>0)return!1;if(0===t.length)return!0;if("object"!=typeof t)return!0;for(var n in t)if(hasOwnProperty.call(t,n))return!1;return!0}(n=n||[])?function(t){return t.replace(r,"")}(t):f(function(t){return t.replace(e,"")}(t=function(t,n){if(!u(n=n||[])){var e=t.match(a);e&&(n=e.map(function(t){return n[t.substr(1)]}))}u(n)&&n.forEach(function(n){n&&(t=function(t,n){var e=-1!==t.indexOf(":");if(n=encodeURIComponent(n),e)return t.replace(i,n);return t.replace(o,n)}(t,n))});var c=t.match(r);c&&c.forEach(function(n){(function(t){return i.test(t)||o.test(t)})(n)&&(t=t.replace(n,""))});return t}(t,n)))}function f(n){return n.replace(t,"")}function h(t){var e=t.host,r=t.path,o=t.query,i=t.hash;e=f(e);var a=r.split("?"),c=a[0],u=a[1];return r=(r=f(function(t){return t.replace(n,"")}(c)))?"/"+r:"",u=u?u+"&":"",""+e+r+(o=o?"?"+u+o:"")+(i=i?"#"+i:"")}function l(t,n){for(var e=[],r=0;r<t.length;r++){var o=t[r];o[n]&&""===o.value&&e.push(o)}return e}function d(t){return{named:t&&t.match(a)||[],splat:t&&t.match(o)||[]}}function p(t){return t=t.replace(c,"\\$&").replace(r,"(?:$1)?").replace(a,function(t,n){return n?t:"([^/?]+)"}).replace(o,"([^?]*?)"),new RegExp("^"+t+"(?:\\?([\\s\\S]*))?$")}function v(t){return s((t=t||{}).path,t.params)}function m(t){var n=[];for(var e in(t=t||{}).query){var r=t.query[e];n.push(e+"="+encodeURIComponent(r))}return n.length?n.join("&"):""}function w(t,n){var e={},r=d(t),o=0;return r.named.forEach(i),r.splat.forEach(i),e;function i(t){e[t.slice(1)]=n[o++]}}return{build:function(t){(t=t||{}).host=t.host||"";var n=v(t),e=m(t);return h({host:t.host,path:n,query:e,hash:t.hash})},test:function(t){return p((t=t||{}).path).test(t.url)},stats:function(t,n){var e=t.match(r)||[],o=d(t),i=o.named,a=o.splat,c=i.concat(a);return u(n=n||{})&&(n=w(t,n)),{params:c=c.map(function(t){for(var r=!1,o=0;o<e.length;o++)if(-1!==e[o].indexOf(t)){r=!0;break}return{name:t,value:n[t.slice(1)]||"",optional:r,required:!r}}),hasOptionalParams:r.test(t),missingOptionalParams:l(c,"optional"),missingRequiredParams:l(c,"required"),missingParams:l(c,"name")}},parse:function(t){void 0===t&&(t={});var n=t.path,e=t.definition,r=t.object;if(!n&&!e)throw new Error("url-composer: Missing path and definition");var o=p(e).exec(n);if(!o)return null;var i=(o=o.slice(1)).map(function(t,n){return n===o.length-1?t||null:t?decodeURIComponent(t):null});if(r){var a=i.pop();(i=w(e,i)).query=a}return i},params:w,path:v,query:m,regex:p,match:d}})},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(3),o=e(1),i=e.n(o),a=e(9),c=e(10);class u{constructor(t){this.history=t?Object(r.b)():Object(r.a)(),this.routes=new Array,this.middlewares=new Array,this.history.block(n=>this._block(n,t))}_block(t,n){let e=`${t.pathname}${t.search}${t.hash}`,r=t,o=this.history.location,a=!1;for(let t=0;t<this.routes.length;t++)if(this.routes[t].validate(e,n))return(a=this._validateFromMiddlewares(this.middlewares,{to:r,from:o}))&&this.routes[t].middlewares.length>0&&a&&(a=this._validateFromMiddlewares(this.routes[t].middlewares,{to:r,from:o},a)),!!a&&this.routes[t].run({to:r,from:o},i.a.parse({path:e,definition:this.routes[t].path,object:!0}),a)}_validateFromMiddlewares(t,{from:n,to:e},r=null){if(t.length>0){for(let o=0;o<t.length;o++)if(!(r=t[o].run({to:e,from:n},r)))return!1;return r}return!0}when(t,n,e=[]){for(let t=0;t<e.length;t++)e[t]=new c.a(e[t]);return this.routes.push(new a.a(t,n,e)),this}middleware(t){return this.middlewares.push(new c.a(t)),this}}window.HistoryRouter=u,n.default=u},function(t,n,e){"use strict";(function(t){e.d(n,"a",function(){return O}),e.d(n,"b",function(){return T});var r=e(4),o=e(5),i=e(6),a=e(7),c=e(8);function u(t){return"/"===t.charAt(0)?t:"/"+t}function s(t){return"/"===t.charAt(0)?t.substr(1):t}function f(t,n){return new RegExp("^"+n+"(\\/|\\?|#|$)","i").test(t)}function h(t,n){return f(t,n)?t.substr(n.length):t}function l(t){return"/"===t.charAt(t.length-1)?t.slice(0,-1):t}function d(t){var n=t.pathname,e=t.search,r=t.hash,o=n||"/";return e&&"?"!==e&&(o+="?"===e.charAt(0)?e:"?"+e),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function p(t,n,e,i){var a;"string"==typeof t?(a=function(t){var n=t||"/",e="",r="",o=n.indexOf("#");-1!==o&&(r=n.substr(o),n=n.substr(0,o));var i=n.indexOf("?");return-1!==i&&(e=n.substr(i),n=n.substr(0,i)),{pathname:n,search:"?"===e?"":e,hash:"#"===r?"":r}}(t)).state=n:(void 0===(a=Object(r.a)({},t)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==n&&void 0===a.state&&(a.state=n));try{a.pathname=decodeURI(a.pathname)}catch(t){throw t instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):t}return e&&(a.key=e),i?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=Object(o.a)(a.pathname,i.pathname)):a.pathname=i.pathname:a.pathname||(a.pathname="/"),a}function v(){var n=null;var e=[];return{setPrompt:function(e){return"production"!==t.env.NODE_ENV&&Object(a.a)(null==n,"A history supports only one prompt at a time"),n=e,function(){n===e&&(n=null)}},confirmTransitionTo:function(e,r,o,i){if(null!=n){var c="function"==typeof n?n(e,r):n;"string"==typeof c?"function"==typeof o?o(c,i):("production"!==t.env.NODE_ENV&&Object(a.a)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),i(!0)):i(!1!==c)}else i(!0)},appendListener:function(t){var n=!0;function r(){n&&t.apply(void 0,arguments)}return e.push(r),function(){n=!1,e=e.filter(function(t){return t!==r})}},notifyListeners:function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];e.forEach(function(t){return t.apply(void 0,n)})}}}var m=!("undefined"==typeof window||!window.document||!window.document.createElement);function w(t,n){n(window.confirm(t))}var y="popstate",g="hashchange";function b(){try{return window.history.state||{}}catch(t){return{}}}function O(n){void 0===n&&(n={}),m||("production"!==t.env.NODE_ENV?Object(c.a)(!1,"Browser history needs a DOM"):Object(c.a)(!1));var e=window.history,o=function(){var t=window.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history}(),i=!(-1===window.navigator.userAgent.indexOf("Trident")),s=n,O=s.forceRefresh,E=void 0!==O&&O,P=s.getUserConfirmation,j=void 0===P?w:P,x=s.keyLength,T=void 0===x?6:x,A=n.basename?l(u(n.basename)):"";function k(n){var e=n||{},r=e.key,o=e.state,i=window.location,c=i.pathname+i.search+i.hash;return"production"!==t.env.NODE_ENV&&Object(a.a)(!A||f(c,A),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+c+'" to begin with "'+A+'".'),A&&(c=h(c,A)),p(c,o,r)}function N(){return Math.random().toString(36).substr(2,T)}var L=v();function _(t){Object(r.a)(F,t),F.length=e.length,L.notifyListeners(F.location,F.action)}function D(t){(function(t){void 0===t.state&&navigator.userAgent.indexOf("CriOS")})(t)||U(k(t.state))}function S(){U(k(b()))}var R=!1;function U(t){if(R)R=!1,_();else{L.confirmTransitionTo(t,"POP",j,function(n){n?_({action:"POP",location:t}):function(t){var n=F.location,e=H.indexOf(n.key);-1===e&&(e=0);var r=H.indexOf(t.key);-1===r&&(r=0);var o=e-r;o&&(R=!0,M(o))}(t)})}}var V=k(b()),H=[V.key];function C(t){return A+d(t)}function M(t){e.go(t)}var $=0;function I(t){1===($+=t)&&1===t?(window.addEventListener(y,D),i&&window.addEventListener(g,S)):0===$&&(window.removeEventListener(y,D),i&&window.removeEventListener(g,S))}var q=!1;var F={length:e.length,action:"POP",location:V,createHref:C,push:function(n,r){"production"!==t.env.NODE_ENV&&Object(a.a)(!("object"==typeof n&&void 0!==n.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var i=p(n,r,N(),F.location);L.confirmTransitionTo(i,"PUSH",j,function(n){if(n){var r=C(i),c=i.key,u=i.state;if(o)if(e.pushState({key:c,state:u},null,r),E)window.location.href=r;else{var s=H.indexOf(F.location.key),f=H.slice(0,-1===s?0:s+1);f.push(i.key),H=f,_({action:"PUSH",location:i})}else"production"!==t.env.NODE_ENV&&Object(a.a)(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(n,r){"production"!==t.env.NODE_ENV&&Object(a.a)(!("object"==typeof n&&void 0!==n.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var i=p(n,r,N(),F.location);L.confirmTransitionTo(i,"REPLACE",j,function(n){if(n){var r=C(i),c=i.key,u=i.state;if(o)if(e.replaceState({key:c,state:u},null,r),E)window.location.replace(r);else{var s=H.indexOf(F.location.key);-1!==s&&(H[s]=i.key),_({action:"REPLACE",location:i})}else"production"!==t.env.NODE_ENV&&Object(a.a)(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:M,goBack:function(){M(-1)},goForward:function(){M(1)},block:function(t){void 0===t&&(t=!1);var n=L.setPrompt(t);return q||(I(1),q=!0),function(){return q&&(q=!1,I(-1)),n()}},listen:function(t){var n=L.appendListener(t);return I(1),function(){I(-1),n()}}};return F}var E="hashchange",P={hashbang:{encodePath:function(t){return"!"===t.charAt(0)?t:"!/"+s(t)},decodePath:function(t){return"!"===t.charAt(0)?t.substr(1):t}},noslash:{encodePath:s,decodePath:u},slash:{encodePath:u,decodePath:u}};function j(){var t=window.location.href,n=t.indexOf("#");return-1===n?"":t.substring(n+1)}function x(t){var n=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,n>=0?n:0)+"#"+t)}function T(n){void 0===n&&(n={}),m||("production"!==t.env.NODE_ENV?Object(c.a)(!1,"Hash history needs a DOM"):Object(c.a)(!1));var e=window.history,o=-1===window.navigator.userAgent.indexOf("Firefox"),s=n,y=s.getUserConfirmation,g=void 0===y?w:y,b=s.hashType,O=void 0===b?"slash":b,T=n.basename?l(u(n.basename)):"",A=P[O],k=A.encodePath,N=A.decodePath;function L(){var n=N(j());return"production"!==t.env.NODE_ENV&&Object(a.a)(!T||f(n,T),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+n+'" to begin with "'+T+'".'),T&&(n=h(n,T)),p(n)}var _=v();function D(t){Object(r.a)(B,t),B.length=e.length,_.notifyListeners(B.location,B.action)}var S=!1,R=null;function U(){var t=j(),n=k(t);if(t!==n)x(n);else{var e=L(),r=B.location;if(!S&&function(t,n){return t.pathname===n.pathname&&t.search===n.search&&t.hash===n.hash&&t.key===n.key&&Object(i.a)(t.state,n.state)}(r,e))return;if(R===d(e))return;R=null,function(t){if(S)S=!1,D();else{_.confirmTransitionTo(t,"POP",g,function(n){n?D({action:"POP",location:t}):function(t){var n=B.location,e=M.lastIndexOf(d(n));-1===e&&(e=0);var r=M.lastIndexOf(d(t));-1===r&&(r=0);var o=e-r;o&&(S=!0,$(o))}(t)})}}(e)}}var V=j(),H=k(V);V!==H&&x(H);var C=L(),M=[d(C)];function $(n){"production"!==t.env.NODE_ENV&&Object(a.a)(o,"Hash history go(n) causes a full page reload in this browser"),e.go(n)}var I=0;function q(t){1===(I+=t)&&1===t?window.addEventListener(E,U):0===I&&window.removeEventListener(E,U)}var F=!1;var B={length:e.length,action:"POP",location:C,createHref:function(t){return"#"+k(T+d(t))},push:function(n,e){"production"!==t.env.NODE_ENV&&Object(a.a)(void 0===e,"Hash history cannot push state; it is ignored");var r=p(n,void 0,void 0,B.location);_.confirmTransitionTo(r,"PUSH",g,function(n){if(n){var e=d(r),o=k(T+e);if(j()!==o){R=e,function(t){window.location.hash=t}(o);var i=M.lastIndexOf(d(B.location)),c=M.slice(0,-1===i?0:i+1);c.push(e),M=c,D({action:"PUSH",location:r})}else"production"!==t.env.NODE_ENV&&Object(a.a)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),D()}})},replace:function(n,e){"production"!==t.env.NODE_ENV&&Object(a.a)(void 0===e,"Hash history cannot replace state; it is ignored");var r=p(n,void 0,void 0,B.location);_.confirmTransitionTo(r,"REPLACE",g,function(t){if(t){var n=d(r),e=k(T+n);j()!==e&&(R=n,x(e));var o=M.indexOf(d(B.location));-1!==o&&(M[o]=n),D({action:"REPLACE",location:r})}})},go:$,goBack:function(){$(-1)},goForward:function(){$(1)},block:function(t){void 0===t&&(t=!1);var n=_.setPrompt(t);return F||(q(1),F=!0),function(){return F&&(F=!1,q(-1)),n()}},listen:function(t){var n=_.appendListener(t);return q(1),function(){q(-1),n()}}};return B}}).call(n,e(0))},function(t,n,e){"use strict";function r(){return(r=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t}).apply(this,arguments)}n.a=r},function(t,n,e){"use strict";function r(t){return"/"===t.charAt(0)}function o(t,n){for(var e=n,r=e+1,o=t.length;r<o;e+=1,r+=1)t[e]=t[r];t.pop()}n.a=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=t&&t.split("/")||[],i=n&&n.split("/")||[],a=t&&r(t),c=n&&r(n),u=a||c;if(t&&r(t)?i=e:e.length&&(i.pop(),i=i.concat(e)),!i.length)return"/";var s=void 0;if(i.length){var f=i[i.length-1];s="."===f||".."===f||""===f}else s=!1;for(var h=0,l=i.length;l>=0;l--){var d=i[l];"."===d?o(i,l):".."===d?(o(i,l),h++):h&&(o(i,l),h--)}if(!u)for(;h--;h)i.unshift("..");!u||""===i[0]||i[0]&&r(i[0])||i.unshift("");var p=i.join("/");return s&&"/"!==p.substr(-1)&&(p+="/"),p}},function(t,n,e){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};n.a=function t(n,e){if(n===e)return!0;if(null==n||null==e)return!1;if(Array.isArray(n))return Array.isArray(e)&&n.length===e.length&&n.every(function(n,r){return t(n,e[r])});var o=void 0===n?"undefined":r(n);if(o!==(void 0===e?"undefined":r(e)))return!1;if("object"===o){var i=n.valueOf(),a=e.valueOf();if(i!==n||a!==e)return t(i,a);var c=Object.keys(n),u=Object.keys(e);return c.length===u.length&&c.every(function(r){return t(n[r],e[r])})}return!1}},function(t,n,e){"use strict";(function(t){var e="production"===t.env.NODE_ENV;n.a=function(t,n){if(!e){if(t)return;var r="Warning: "+n;"undefined"!=typeof console&&console.warn(r);try{throw Error(r)}catch(t){}}}}).call(n,e(0))},function(t,n,e){"use strict";(function(t){var e="production"===t.env.NODE_ENV,r="Invariant failed";n.a=function(t,n){if(!t)throw e?new Error(r):new Error(r+": "+(n||""))}}).call(n,e(0))},function(t,n,e){"use strict";var r=e(1),o=e.n(r);n.a=class{constructor(t,n,e){this.path=t,this.cb=n,this.middlewares=e}run({to:t,from:n},e,r){this.cb({to:t,from:n,params:e,response:r})}validate(t,n){return o.a.test(n?{path:`/#/${this.path}`,url:`/#/${t}`}:{path:this.path,url:t})}}},function(t,n,e){"use strict";n.a=class{constructor(t){this.cb=t}run({from:t,to:n},e=null){return this.cb({from:t,to:n,response:e})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,